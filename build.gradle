apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'application'

version = '1.3.1'

mainClassName = 'asl.sensor.SensorSuite'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
}
dependencies {
    compile group: 'org.jfree', name: 'jfreechart', version: '1.0.19'

    compile group: 'edu.sc.seis', name: 'seisFile', version: '1.8.+'
    compile group: 'edu.sc.seis', name: 'seedCodec', version: '1.0.11'


    compile group: 'org.apache.pdfbox', name: 'pdfbox', version: '2.+'
    compile group: 'org.apache.commons', name: 'commons-math3', version: '3.+'

    compile group: 'net.sf.py4j', name: 'py4j', version: '0.10.7'

    compile group: 'uk.me.berndporr', name: 'iirj', version: '1.0'

    testCompile group: 'junit', name: 'junit', version: '4.+'
}

task jarMain(type: Jar) {
    baseName = rootProject.name
    manifest {
        attributes 'Implementation-Title': 'ASL Sensor Test Suite',
                'Implementation-Version': version,
                'Main-Class': mainClassName
    }

    /* Adds all dependent libraries*/
    from {
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
        configurations.runtime.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    with jar
}

task jarServer(type: Jar) {
    baseName = 'CalServer'
    manifest {
        attributes 'Implementation-Title': 'Calibration Processing Server(cmd)',
                'Implementation-Version': version,
                'Main-Class': 'asl.sensor.CalProcessingServer'
    }

    from {
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
        configurations.runtime.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    with jar
}


test {
    maxHeapSize = "4096m"
    maxParallelForks = 4
    testLogging {
        events "skipped", "failed"
        afterSuite { desc, result ->
            if (!desc.parent) {
                println "Result: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
    }
}

/*Turn off doclint since it is far too strict and breaks the javadoc every time*/
if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

javadoc {
    options.memberLevel = JavadocMemberLevel.PRIVATE
}

compileJava {
    options.incremental = true
}

task copyJar(type: Copy) {
    from jarMain
    into rootDir
}


task copyServerJar(type: Copy) {
    from jarServer
    into rootDir
}

task gitSubmodule(type: Exec) {
    description 'Update git submodules'
    commandLine 'git', 'submodule', 'update', '--init'
}

build.dependsOn copyJar, copyServerJar
processTestResources.dependsOn gitSubmodule
